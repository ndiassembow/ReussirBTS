// üìÅ lib/provider/theme_provider.dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// üîπ Provider qui g√®re le th√®me clair/sombre de l‚Äôapplication.
/// Il utilise `SharedPreferences` pour m√©moriser la pr√©f√©rence
/// de l‚Äôutilisateur m√™me apr√®s la fermeture de l‚Äôapplication.
class ThemeProvider with ChangeNotifier {
  // --- √âtat interne ---
  bool _isDark = false; // ‚úÖ Th√®me par d√©faut = clair

  // --- Getter ---
  bool get isDark => _isDark; // permet d‚Äôacc√©der √† l‚Äô√©tat du th√®me

  // --- Constructeur ---
  ThemeProvider() {
    _loadTheme(); // au d√©marrage, on charge la pr√©f√©rence sauvegard√©e
  }

  // --- M√©thode : inversion du th√®me ---
  void toggleTheme() {
    _isDark = !_isDark; // bascule clair ‚Üî sombre
    _saveTheme(); // sauvegarde dans SharedPreferences
    notifyListeners(); // informe l‚ÄôUI que le th√®me a chang√©
  }

  // --- M√©thode priv√©e : charger le th√®me sauvegard√© ---
  Future<void> _loadTheme() async {
    final prefs = await SharedPreferences.getInstance();
    _isDark =
        prefs.getBool('isDark') ?? false; // r√©cup√®re la valeur, d√©faut = clair
    notifyListeners(); // met √† jour les widgets
  }

  // --- M√©thode priv√©e : sauvegarder le th√®me choisi ---
  Future<void> _saveTheme() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('isDark', _isDark); // stocke le choix utilisateur
  }
}
